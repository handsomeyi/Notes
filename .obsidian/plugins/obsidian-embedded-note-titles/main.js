/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

const ELEMENT_RE = /[\w-]+/g;
const ID_RE = /#[\w-]+/g;
const CLASS_RE = /\.[\w-]+/g;
const ATTR_RE = /\[[^\]]+\]/g;
const PSEUDO_CLASSES_RE = /\:(?!not)[\w-]+(\(.*\))?/g;
const PSEUDO_ELEMENTS_RE = /\:\:?(after|before|first-letter|first-line|selection)/g;
// convert an array-like object to array
function toArray(list) {
    return [].slice.call(list);
}
// handles extraction of `cssRules` as an `Array` from a stylesheet or something that behaves the same
function getSheetRules(stylesheet) {
    var sheet_media = stylesheet.media && stylesheet.media.mediaText;
    // if this sheet is disabled skip it
    if (stylesheet.disabled)
        return [];
    // if this sheet's media is specified and doesn't match the viewport then skip it
    if (sheet_media &&
        sheet_media.length &&
        !window.matchMedia(sheet_media).matches)
        return [];
    // get the style rules of this sheet
    return toArray(stylesheet.cssRules);
}
function _find(string, re) {
    var matches = string.match(re);
    return matches ? matches.length : 0;
}
// calculates the specificity of a given `selector`
function calculateScore(selector) {
    var score = [0, 0, 0], parts = selector.split(" "), part, match;
    //TODO: clean the ':not' part since the last ELEMENT_RE will pick it up
    while (((part = parts.shift()), typeof part == "string")) {
        // find all pseudo-elements
        match = _find(part, PSEUDO_ELEMENTS_RE);
        score[2] += match;
        // and remove them
        match && (part = part.replace(PSEUDO_ELEMENTS_RE, ""));
        // find all pseudo-classes
        match = _find(part, PSEUDO_CLASSES_RE);
        score[1] += match;
        // and remove them
        match && (part = part.replace(PSEUDO_CLASSES_RE, ""));
        // find all attributes
        match = _find(part, ATTR_RE);
        score[1] += match;
        // and remove them
        match && (part = part.replace(ATTR_RE, ""));
        // find all IDs
        match = _find(part, ID_RE);
        score[0] += match;
        // and remove them
        match && (part = part.replace(ID_RE, ""));
        // find all classes
        match = _find(part, CLASS_RE);
        score[1] += match;
        // and remove them
        match && (part = part.replace(CLASS_RE, ""));
        // find all elements
        score[2] += _find(part, ELEMENT_RE);
    }
    return parseInt(score.join(""), 10);
}
// returns the heights possible specificity score an element can get from a give rule's selectorText
function getSpecificityScore(element, selectorText) {
    var selectors = selectorText.split(","), selector, score, result = 0;
    while ((selector = selectors.shift())) {
        if (element.matches(selector)) {
            score = calculateScore(selector);
            result = score > result ? score : result;
        }
    }
    return result;
}
function sortBySpecificity(element, rules) {
    // comparing function that sorts CSSStyleRules according to specificity of their `selectorText`
    function compareSpecificity(a, b) {
        let aScore = getSpecificityScore(element, a.selectorText);
        let bScore = getSpecificityScore(element, b.selectorText);
        // If the styles come from app.css, they take a lower priority
        if (aScore === bScore) {
            if (a.parentStyleSheet.href)
                aScore -= 1;
            if (b.parentStyleSheet.href)
                bScore -= 1;
        }
        return (aScore -
            bScore);
    }
    return rules.sort(compareSpecificity);
}
function getMatchedCSSRules(element) {
    let styleSheets = toArray(window.document.styleSheets);
    let sheet;
    let rules;
    let rule;
    let result = [];
    // assuming the browser hands us stylesheets in order of appearance
    // we iterate them from the beginning to follow proper cascade order
    while ((sheet = styleSheets.shift())) {
        // get the style rules of this sheet
        rules = getSheetRules(sheet);
        // loop the rules in order of appearance
        while ((rule = rules.shift())) {
            // if this is an @import rule
            if (rule.styleSheet) {
                // insert the imported stylesheet's rules at the beginning of this stylesheet's rules
                rules = getSheetRules(rule.styleSheet).concat(rules);
                // and skip this rule
                continue;
            }
            // if there's no stylesheet attribute BUT there IS a media attribute it's a media rule
            else if (rule.media) {
                // insert the contained rules of this media rule to the beginning of this stylesheet's rules
                rules = getSheetRules(rule).concat(rules);
                // and skip it
                continue;
            }
            // check if this element matches this rule's selector
            if (element.matches(rule.selectorText)) {
                // push the rule to the results set
                result.push(rule);
            }
        }
    }
    // sort according to specificity
    return sortBySpecificity(element, result);
}

// Split CSS margin and padding values like `0 auto`, `10px auto 0`, etc.
function getRightLeft(val) {
    if (/\s/.test(val)) {
        const vals = val.split(/\s+/g);
        if (vals.length === 2 || vals.length === 3) {
            return [vals[1], vals[1]];
        }
        if (vals.length === 4) {
            return [vals[1], vals[3]];
        }
    }
    return [val, val];
}
const keyMap = {
    width: "width",
    maxWidth: "max-width",
    margin: "margin",
    marginLeft: "margin-left",
    marginRight: "margin-right",
    padding: "padding",
    paddingLeft: "padding-left",
    paddingRight: "padding-right",
};
// Get the relevant style values from a reference element
function getRefSizing(el) {
    const rules = getMatchedCSSRules(el);
    const sizing = {};
    rules.forEach((r) => {
        const { width, maxWidth, margin, marginLeft, marginRight, padding, paddingLeft, paddingRight, } = r.style;
        if (width) {
            sizing.width = width;
        }
        if (maxWidth) {
            sizing.maxWidth = maxWidth;
        }
        if (margin) {
            const [mRight, mLeft] = getRightLeft(margin);
            sizing.marginLeft = mLeft;
            sizing.marginLeft = mRight;
        }
        if (marginLeft)
            sizing.marginLeft = marginLeft;
        if (marginRight)
            sizing.marginRight = marginRight;
        if (padding) {
            const [pRight, pLeft] = getRightLeft(padding);
            sizing.paddingLeft = pLeft;
            sizing.paddingLeft = pRight;
        }
        if (paddingLeft)
            sizing.paddingLeft = paddingLeft;
        if (paddingRight)
            sizing.paddingRight = paddingRight;
    });
    return sizing;
}
// Apply reference styles to a heading element
function applyRefStyles(heading, ref) {
    for (const key in ref) {
        const val = ref[key];
        if (val) {
            heading.style.setProperty(keyMap[key], val);
        }
    }
}
class HeadingsManager {
    constructor() {
        this.headings = {};
        this.previewSizerRef = null;
        this.codeMirrorSizerRef = null;
        this.codeMirrorSizerInvalid = true;
    }
    getPreviewSizerStyles() {
        const el = document.getElementsByClassName("markdown-preview-sizer");
        if (el.length) {
            this.previewSizerRef = getRefSizing(el[0]);
        }
    }
    getCodeMirrorSizerStyles() {
        const sizerEl = document.getElementsByClassName("CodeMirror-sizer");
        const lineEl = document.getElementsByClassName("CodeMirror-line");
        if (sizerEl.length && lineEl.length) {
            const sizer = sizerEl[0];
            const { marginLeft, paddingRight, borderRightWidth } = sizer.style;
            // If codemirror hasn't applied styles to the div yet, let's consider it
            // invalid so we can check it again later
            if (marginLeft !== "0px" && paddingRight !== "0px") {
                this.codeMirrorSizerInvalid = false;
            }
            const inline = {
                marginLeft,
                marginRight: borderRightWidth,
                paddingRight,
            };
            const sizerRef = getRefSizing(sizer);
            const line = lineEl[0];
            const lineRef = getRefSizing(line);
            // Combine inline styles with CSS styles
            this.codeMirrorSizerRef = Object.assign(Object.assign({}, inline), sizerRef);
            if (lineRef.paddingLeft) {
                this.codeMirrorSizerRef.paddingLeft = this.codeMirrorSizerRef
                    .paddingLeft
                    ? `calc(${this.codeMirrorSizerRef.paddingLeft} + ${lineRef.paddingLeft})`
                    : lineRef.paddingLeft;
            }
            if (lineRef.paddingRight) {
                this.codeMirrorSizerRef.paddingRight = this.codeMirrorSizerRef
                    .paddingRight
                    ? `calc(${this.codeMirrorSizerRef.paddingRight} + ${lineRef.paddingRight})`
                    : lineRef.paddingRight;
            }
        }
    }
    // Once the codemirror heading styles have been validated, loop through and update everything
    updateCodeMirrorHeadings() {
        Object.keys(this.headings).forEach((id) => {
            const h1Edit = document.getElementById(`${id}-edit`);
            applyRefStyles(h1Edit, this.codeMirrorSizerRef);
        });
    }
    // Clean up headings once a pane has been closed or the plugin has been disabled
    removeHeading(id) {
        if (!this.headings[id])
            return;
        const h1Edit = document.getElementById(`${id}-edit`);
        const h1Preview = document.getElementById(`${id}-preview`);
        if (h1Edit)
            h1Edit.remove();
        if (h1Preview)
            h1Preview.remove();
        this.headings[id].resizeWatcher.disconnect();
        delete this.headings[id].resizeWatcher;
        delete this.headings[id];
    }
    createHeading(id, leaf) {
        var _a, _b;
        // CodeMirror adds margin and padding only after the editor is visible
        if (this.codeMirrorSizerInvalid &&
            ((_a = leaf.getViewState().state) === null || _a === void 0 ? void 0 : _a.mode) === "source") {
            this.getCodeMirrorSizerStyles();
            if (!this.codeMirrorSizerInvalid) {
                this.updateCodeMirrorHeadings();
            }
        }
        if (this.headings[id])
            return;
        const title = (_b = leaf.view.file) === null || _b === void 0 ? void 0 : _b.basename;
        if (!title)
            return;
        const viewContent = leaf.view.containerEl.getElementsByClassName("CodeMirror-scroll");
        const lines = leaf.view.containerEl.getElementsByClassName("CodeMirror-lines");
        const previewContent = leaf.view.containerEl.getElementsByClassName("markdown-preview-view");
        if (!this.previewSizerRef) {
            this.getPreviewSizerStyles();
        }
        if (!this.codeMirrorSizerRef) {
            this.getCodeMirrorSizerStyles();
        }
        if (viewContent.length && previewContent.length) {
            // Create the codemirror heading
            const editEl = viewContent[0];
            const h1Edit = document.createElement("h1");
            applyRefStyles(h1Edit, this.codeMirrorSizerRef);
            h1Edit.setText(title);
            h1Edit.id = `${id}-edit`;
            editEl.prepend(h1Edit);
            const onResize = obsidian.debounce((entries) => {
                if (lines.length) {
                    const linesEl = lines[0];
                    const height = Math.ceil(entries[0].borderBoxSize[0].blockSize);
                    linesEl.style.paddingTop = `${height}px`;
                    h1Edit.style.marginBottom = `-${height}px`;
                }
            }, 20, true);
            // We need to push the content down when the pane resizes so the heading
            // doesn't cover the content
            const resizeWatcher = new window.ResizeObserver(onResize);
            resizeWatcher.observe(h1Edit);
            // Create the preview heading
            const previewEl = previewContent[0];
            const h1Preview = document.createElement("h1");
            applyRefStyles(h1Preview, this.previewSizerRef);
            h1Preview.setText(title);
            h1Preview.id = `${id}-preview`;
            previewEl.prepend(h1Preview);
            this.headings[id] = { leaf, resizeWatcher };
        }
    }
    // Generate a unique ID for a leaf
    getLeafId(leaf) {
        const viewState = leaf.getViewState();
        if (viewState.type === "markdown") {
            return "title-" + Math.random().toString(36).substr(2, 9);
        }
        return null;
    }
    // Iterate through all leafs and generate headings if needed
    createHeadings(app) {
        const seen = {};
        app.workspace.iterateRootLeaves((leaf) => {
            const id = this.getLeafId(leaf);
            if (id) {
                this.createHeading(id, leaf);
                seen[id] = true;
            }
        });
        Object.keys(this.headings).forEach((id) => {
            if (!seen[id]) {
                this.removeHeading(id);
            }
        });
    }
    cleanup() {
        this.previewSizerRef = null;
        this.codeMirrorSizerRef = null;
        Object.keys(this.headings).forEach((id) => {
            this.removeHeading(id);
        });
    }
}

class EmbeddedNoteTitlesPlugin extends obsidian.Plugin {
    onload() {
        document.body.classList.add("embedded-note-titles");
        this.headingsManager = new HeadingsManager();
        this.registerEvent(this.app.workspace.on("layout-change", () => {
            setTimeout(() => {
                this.headingsManager.createHeadings(this.app);
            }, 0);
        }));
        // Listen for CSS changes so we can recalculate heading styles
        this.registerEvent(this.app.workspace.on("css-change", () => {
            this.headingsManager.cleanup();
            setTimeout(() => {
                this.headingsManager.createHeadings(this.app);
            }, 0);
        }));
        this.app.workspace.layoutReady
            ? this.app.workspace.trigger("layout-change")
            : this.app.workspace.onLayoutReady(() => {
                // Trigger layout-change to ensure headings are created when the app loads
                this.app.workspace.trigger("layout-change");
            });
    }
    onunload() {
        document.body.classList.remove("embedded-note-titles");
        this.headingsManager.cleanup();
    }
}

module.exports = EmbeddedNoteTitlesPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsic3JjL2dldE1hdGNoZWRDU1NSdWxlcy50cyIsInNyYy9IZWFkaW5nc01hbmFnZXIudHMiLCJzcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBFTEVNRU5UX1JFID0gL1tcXHctXSsvZztcbmNvbnN0IElEX1JFID0gLyNbXFx3LV0rL2c7XG5jb25zdCBDTEFTU19SRSA9IC9cXC5bXFx3LV0rL2c7XG5jb25zdCBBVFRSX1JFID0gL1xcW1teXFxdXStcXF0vZztcbmNvbnN0IFBTRVVET19DTEFTU0VTX1JFID0gL1xcOig/IW5vdClbXFx3LV0rKFxcKC4qXFwpKT8vZztcbmNvbnN0IFBTRVVET19FTEVNRU5UU19SRSA9IC9cXDpcXDo/KGFmdGVyfGJlZm9yZXxmaXJzdC1sZXR0ZXJ8Zmlyc3QtbGluZXxzZWxlY3Rpb24pL2c7XG5cbi8vIGNvbnZlcnQgYW4gYXJyYXktbGlrZSBvYmplY3QgdG8gYXJyYXlcbmZ1bmN0aW9uIHRvQXJyYXkobGlzdDogYW55KSB7XG4gIHJldHVybiBbXS5zbGljZS5jYWxsKGxpc3QpO1xufVxuXG4vLyBoYW5kbGVzIGV4dHJhY3Rpb24gb2YgYGNzc1J1bGVzYCBhcyBhbiBgQXJyYXlgIGZyb20gYSBzdHlsZXNoZWV0IG9yIHNvbWV0aGluZyB0aGF0IGJlaGF2ZXMgdGhlIHNhbWVcbmZ1bmN0aW9uIGdldFNoZWV0UnVsZXMoc3R5bGVzaGVldDogQ1NTU3R5bGVTaGVldCkge1xuICB2YXIgc2hlZXRfbWVkaWEgPSBzdHlsZXNoZWV0Lm1lZGlhICYmIHN0eWxlc2hlZXQubWVkaWEubWVkaWFUZXh0O1xuICAvLyBpZiB0aGlzIHNoZWV0IGlzIGRpc2FibGVkIHNraXAgaXRcbiAgaWYgKHN0eWxlc2hlZXQuZGlzYWJsZWQpIHJldHVybiBbXTtcbiAgLy8gaWYgdGhpcyBzaGVldCdzIG1lZGlhIGlzIHNwZWNpZmllZCBhbmQgZG9lc24ndCBtYXRjaCB0aGUgdmlld3BvcnQgdGhlbiBza2lwIGl0XG4gIGlmIChcbiAgICBzaGVldF9tZWRpYSAmJlxuICAgIHNoZWV0X21lZGlhLmxlbmd0aCAmJlxuICAgICF3aW5kb3cubWF0Y2hNZWRpYShzaGVldF9tZWRpYSkubWF0Y2hlc1xuICApXG4gICAgcmV0dXJuIFtdO1xuICAvLyBnZXQgdGhlIHN0eWxlIHJ1bGVzIG9mIHRoaXMgc2hlZXRcbiAgcmV0dXJuIHRvQXJyYXkoc3R5bGVzaGVldC5jc3NSdWxlcyk7XG59XG5cbmZ1bmN0aW9uIF9maW5kKHN0cmluZzogc3RyaW5nLCByZTogUmVnRXhwKSB7XG4gIHZhciBtYXRjaGVzID0gc3RyaW5nLm1hdGNoKHJlKTtcbiAgcmV0dXJuIG1hdGNoZXMgPyBtYXRjaGVzLmxlbmd0aCA6IDA7XG59XG5cbi8vIGNhbGN1bGF0ZXMgdGhlIHNwZWNpZmljaXR5IG9mIGEgZ2l2ZW4gYHNlbGVjdG9yYFxuZnVuY3Rpb24gY2FsY3VsYXRlU2NvcmUoc2VsZWN0b3I6IHN0cmluZykge1xuICB2YXIgc2NvcmUgPSBbMCwgMCwgMF0sXG4gICAgcGFydHMgPSBzZWxlY3Rvci5zcGxpdChcIiBcIiksXG4gICAgcGFydCxcbiAgICBtYXRjaDtcbiAgLy9UT0RPOiBjbGVhbiB0aGUgJzpub3QnIHBhcnQgc2luY2UgdGhlIGxhc3QgRUxFTUVOVF9SRSB3aWxsIHBpY2sgaXQgdXBcbiAgd2hpbGUgKCgocGFydCA9IHBhcnRzLnNoaWZ0KCkpLCB0eXBlb2YgcGFydCA9PSBcInN0cmluZ1wiKSkge1xuICAgIC8vIGZpbmQgYWxsIHBzZXVkby1lbGVtZW50c1xuICAgIG1hdGNoID0gX2ZpbmQocGFydCwgUFNFVURPX0VMRU1FTlRTX1JFKTtcbiAgICBzY29yZVsyXSArPSBtYXRjaDtcbiAgICAvLyBhbmQgcmVtb3ZlIHRoZW1cbiAgICBtYXRjaCAmJiAocGFydCA9IHBhcnQucmVwbGFjZShQU0VVRE9fRUxFTUVOVFNfUkUsIFwiXCIpKTtcbiAgICAvLyBmaW5kIGFsbCBwc2V1ZG8tY2xhc3Nlc1xuICAgIG1hdGNoID0gX2ZpbmQocGFydCwgUFNFVURPX0NMQVNTRVNfUkUpO1xuICAgIHNjb3JlWzFdICs9IG1hdGNoO1xuICAgIC8vIGFuZCByZW1vdmUgdGhlbVxuICAgIG1hdGNoICYmIChwYXJ0ID0gcGFydC5yZXBsYWNlKFBTRVVET19DTEFTU0VTX1JFLCBcIlwiKSk7XG4gICAgLy8gZmluZCBhbGwgYXR0cmlidXRlc1xuICAgIG1hdGNoID0gX2ZpbmQocGFydCwgQVRUUl9SRSk7XG4gICAgc2NvcmVbMV0gKz0gbWF0Y2g7XG4gICAgLy8gYW5kIHJlbW92ZSB0aGVtXG4gICAgbWF0Y2ggJiYgKHBhcnQgPSBwYXJ0LnJlcGxhY2UoQVRUUl9SRSwgXCJcIikpO1xuICAgIC8vIGZpbmQgYWxsIElEc1xuICAgIG1hdGNoID0gX2ZpbmQocGFydCwgSURfUkUpO1xuICAgIHNjb3JlWzBdICs9IG1hdGNoO1xuICAgIC8vIGFuZCByZW1vdmUgdGhlbVxuICAgIG1hdGNoICYmIChwYXJ0ID0gcGFydC5yZXBsYWNlKElEX1JFLCBcIlwiKSk7XG4gICAgLy8gZmluZCBhbGwgY2xhc3Nlc1xuICAgIG1hdGNoID0gX2ZpbmQocGFydCwgQ0xBU1NfUkUpO1xuICAgIHNjb3JlWzFdICs9IG1hdGNoO1xuICAgIC8vIGFuZCByZW1vdmUgdGhlbVxuICAgIG1hdGNoICYmIChwYXJ0ID0gcGFydC5yZXBsYWNlKENMQVNTX1JFLCBcIlwiKSk7XG4gICAgLy8gZmluZCBhbGwgZWxlbWVudHNcbiAgICBzY29yZVsyXSArPSBfZmluZChwYXJ0LCBFTEVNRU5UX1JFKTtcbiAgfVxuICByZXR1cm4gcGFyc2VJbnQoc2NvcmUuam9pbihcIlwiKSwgMTApO1xufVxuXG4vLyByZXR1cm5zIHRoZSBoZWlnaHRzIHBvc3NpYmxlIHNwZWNpZmljaXR5IHNjb3JlIGFuIGVsZW1lbnQgY2FuIGdldCBmcm9tIGEgZ2l2ZSBydWxlJ3Mgc2VsZWN0b3JUZXh0XG5mdW5jdGlvbiBnZXRTcGVjaWZpY2l0eVNjb3JlKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzZWxlY3RvclRleHQ6IHN0cmluZykge1xuICB2YXIgc2VsZWN0b3JzID0gc2VsZWN0b3JUZXh0LnNwbGl0KFwiLFwiKSxcbiAgICBzZWxlY3RvcixcbiAgICBzY29yZSxcbiAgICByZXN1bHQgPSAwO1xuXG4gIHdoaWxlICgoc2VsZWN0b3IgPSBzZWxlY3RvcnMuc2hpZnQoKSkpIHtcbiAgICBpZiAoZWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgc2NvcmUgPSBjYWxjdWxhdGVTY29yZShzZWxlY3Rvcik7XG4gICAgICByZXN1bHQgPSBzY29yZSA+IHJlc3VsdCA/IHNjb3JlIDogcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHNvcnRCeVNwZWNpZmljaXR5KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBydWxlczogQ1NTU3R5bGVSdWxlW10pIHtcbiAgLy8gY29tcGFyaW5nIGZ1bmN0aW9uIHRoYXQgc29ydHMgQ1NTU3R5bGVSdWxlcyBhY2NvcmRpbmcgdG8gc3BlY2lmaWNpdHkgb2YgdGhlaXIgYHNlbGVjdG9yVGV4dGBcbiAgZnVuY3Rpb24gY29tcGFyZVNwZWNpZmljaXR5KGE6IENTU1N0eWxlUnVsZSwgYjogQ1NTU3R5bGVSdWxlKSB7XG4gICAgbGV0IGFTY29yZSA9IGdldFNwZWNpZmljaXR5U2NvcmUoZWxlbWVudCwgYS5zZWxlY3RvclRleHQpO1xuICAgIGxldCBiU2NvcmUgPSBnZXRTcGVjaWZpY2l0eVNjb3JlKGVsZW1lbnQsIGIuc2VsZWN0b3JUZXh0KTtcblxuICAgIC8vIElmIHRoZSBzdHlsZXMgY29tZSBmcm9tIGFwcC5jc3MsIHRoZXkgdGFrZSBhIGxvd2VyIHByaW9yaXR5XG4gICAgaWYgKGFTY29yZSA9PT0gYlNjb3JlKSB7XG4gICAgICBpZiAoYS5wYXJlbnRTdHlsZVNoZWV0LmhyZWYpIGFTY29yZSAtPSAxO1xuICAgICAgaWYgKGIucGFyZW50U3R5bGVTaGVldC5ocmVmKSBiU2NvcmUgLT0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgYVNjb3JlIC1cbiAgICAgIGJTY29yZVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gcnVsZXMuc29ydChjb21wYXJlU3BlY2lmaWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWF0Y2hlZENTU1J1bGVzKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogQ1NTU3R5bGVSdWxlW10ge1xuICBsZXQgc3R5bGVTaGVldHMgPSB0b0FycmF5KHdpbmRvdy5kb2N1bWVudC5zdHlsZVNoZWV0cylcbiAgbGV0IHNoZWV0O1xuICBsZXQgcnVsZXM7XG4gIGxldCBydWxlO1xuICBsZXQgcmVzdWx0OiBDU1NTdHlsZVJ1bGVbXSA9IFtdO1xuXG4gIC8vIGFzc3VtaW5nIHRoZSBicm93c2VyIGhhbmRzIHVzIHN0eWxlc2hlZXRzIGluIG9yZGVyIG9mIGFwcGVhcmFuY2VcbiAgLy8gd2UgaXRlcmF0ZSB0aGVtIGZyb20gdGhlIGJlZ2lubmluZyB0byBmb2xsb3cgcHJvcGVyIGNhc2NhZGUgb3JkZXJcbiAgd2hpbGUgKChzaGVldCA9IHN0eWxlU2hlZXRzLnNoaWZ0KCkpKSB7XG4gICAgLy8gZ2V0IHRoZSBzdHlsZSBydWxlcyBvZiB0aGlzIHNoZWV0XG4gICAgcnVsZXMgPSBnZXRTaGVldFJ1bGVzKHNoZWV0KTtcbiAgICAvLyBsb29wIHRoZSBydWxlcyBpbiBvcmRlciBvZiBhcHBlYXJhbmNlXG4gICAgd2hpbGUgKChydWxlID0gcnVsZXMuc2hpZnQoKSkpIHtcbiAgICAgIC8vIGlmIHRoaXMgaXMgYW4gQGltcG9ydCBydWxlXG4gICAgICBpZiAocnVsZS5zdHlsZVNoZWV0KSB7XG4gICAgICAgIC8vIGluc2VydCB0aGUgaW1wb3J0ZWQgc3R5bGVzaGVldCdzIHJ1bGVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBzdHlsZXNoZWV0J3MgcnVsZXNcbiAgICAgICAgcnVsZXMgPSBnZXRTaGVldFJ1bGVzKHJ1bGUuc3R5bGVTaGVldCkuY29uY2F0KHJ1bGVzKTtcbiAgICAgICAgLy8gYW5kIHNraXAgdGhpcyBydWxlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gaWYgdGhlcmUncyBubyBzdHlsZXNoZWV0IGF0dHJpYnV0ZSBCVVQgdGhlcmUgSVMgYSBtZWRpYSBhdHRyaWJ1dGUgaXQncyBhIG1lZGlhIHJ1bGVcbiAgICAgIGVsc2UgaWYgKHJ1bGUubWVkaWEpIHtcbiAgICAgICAgLy8gaW5zZXJ0IHRoZSBjb250YWluZWQgcnVsZXMgb2YgdGhpcyBtZWRpYSBydWxlIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBzdHlsZXNoZWV0J3MgcnVsZXNcbiAgICAgICAgcnVsZXMgPSBnZXRTaGVldFJ1bGVzKHJ1bGUpLmNvbmNhdChydWxlcyk7XG4gICAgICAgIC8vIGFuZCBza2lwIGl0XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBpZiB0aGlzIGVsZW1lbnQgbWF0Y2hlcyB0aGlzIHJ1bGUncyBzZWxlY3RvclxuICAgICAgaWYgKGVsZW1lbnQubWF0Y2hlcyhydWxlLnNlbGVjdG9yVGV4dCkpIHtcbiAgICAgICAgLy8gcHVzaCB0aGUgcnVsZSB0byB0aGUgcmVzdWx0cyBzZXRcbiAgICAgICAgcmVzdWx0LnB1c2gocnVsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIHNvcnQgYWNjb3JkaW5nIHRvIHNwZWNpZmljaXR5XG4gIHJldHVybiBzb3J0QnlTcGVjaWZpY2l0eShlbGVtZW50LCByZXN1bHQpO1xufVxuIiwiaW1wb3J0IHsgQXBwLCBXb3Jrc3BhY2VMZWFmLCBkZWJvdW5jZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgZ2V0TWF0Y2hlZENTU1J1bGVzIH0gZnJvbSBcIi4vZ2V0TWF0Y2hlZENTU1J1bGVzXCI7XG5cbmludGVyZmFjZSBSZWZTaXppbmcge1xuICB3aWR0aD86IHN0cmluZztcbiAgbWF4V2lkdGg/OiBzdHJpbmc7XG4gIG1hcmdpbkxlZnQ/OiBzdHJpbmc7XG4gIG1hcmdpblJpZ2h0Pzogc3RyaW5nO1xuICBwYWRkaW5nTGVmdD86IHN0cmluZztcbiAgcGFkZGluZ1JpZ2h0Pzogc3RyaW5nO1xufVxuXG4vLyBTcGxpdCBDU1MgbWFyZ2luIGFuZCBwYWRkaW5nIHZhbHVlcyBsaWtlIGAwIGF1dG9gLCBgMTBweCBhdXRvIDBgLCBldGMuXG5mdW5jdGlvbiBnZXRSaWdodExlZnQodmFsOiBzdHJpbmcpIHtcbiAgaWYgKC9cXHMvLnRlc3QodmFsKSkge1xuICAgIGNvbnN0IHZhbHMgPSB2YWwuc3BsaXQoL1xccysvZyk7XG5cbiAgICBpZiAodmFscy5sZW5ndGggPT09IDIgfHwgdmFscy5sZW5ndGggPT09IDMpIHtcbiAgICAgIHJldHVybiBbdmFsc1sxXSwgdmFsc1sxXV07XG4gICAgfVxuXG4gICAgaWYgKHZhbHMubGVuZ3RoID09PSA0KSB7XG4gICAgICByZXR1cm4gW3ZhbHNbMV0sIHZhbHNbM11dO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbdmFsLCB2YWxdO1xufVxuXG5jb25zdCBrZXlNYXA6IHsgW2s6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICB3aWR0aDogXCJ3aWR0aFwiLFxuICBtYXhXaWR0aDogXCJtYXgtd2lkdGhcIixcbiAgbWFyZ2luOiBcIm1hcmdpblwiLFxuICBtYXJnaW5MZWZ0OiBcIm1hcmdpbi1sZWZ0XCIsXG4gIG1hcmdpblJpZ2h0OiBcIm1hcmdpbi1yaWdodFwiLFxuICBwYWRkaW5nOiBcInBhZGRpbmdcIixcbiAgcGFkZGluZ0xlZnQ6IFwicGFkZGluZy1sZWZ0XCIsXG4gIHBhZGRpbmdSaWdodDogXCJwYWRkaW5nLXJpZ2h0XCIsXG59O1xuXG4vLyBHZXQgdGhlIHJlbGV2YW50IHN0eWxlIHZhbHVlcyBmcm9tIGEgcmVmZXJlbmNlIGVsZW1lbnRcbmZ1bmN0aW9uIGdldFJlZlNpemluZyhlbDogSFRNTEVsZW1lbnQpIHtcbiAgY29uc3QgcnVsZXMgPSBnZXRNYXRjaGVkQ1NTUnVsZXMoZWwpO1xuICBjb25zdCBzaXppbmc6IFJlZlNpemluZyA9IHt9O1xuXG4gIHJ1bGVzLmZvckVhY2goKHIpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB3aWR0aCxcbiAgICAgIG1heFdpZHRoLFxuICAgICAgbWFyZ2luLFxuICAgICAgbWFyZ2luTGVmdCxcbiAgICAgIG1hcmdpblJpZ2h0LFxuICAgICAgcGFkZGluZyxcbiAgICAgIHBhZGRpbmdMZWZ0LFxuICAgICAgcGFkZGluZ1JpZ2h0LFxuICAgIH0gPSByLnN0eWxlO1xuXG4gICAgaWYgKHdpZHRoKSB7XG4gICAgICBzaXppbmcud2lkdGggPSB3aWR0aDtcbiAgICB9XG5cbiAgICBpZiAobWF4V2lkdGgpIHtcbiAgICAgIHNpemluZy5tYXhXaWR0aCA9IG1heFdpZHRoO1xuICAgIH1cblxuICAgIGlmIChtYXJnaW4pIHtcbiAgICAgIGNvbnN0IFttUmlnaHQsIG1MZWZ0XSA9IGdldFJpZ2h0TGVmdChtYXJnaW4pO1xuICAgICAgc2l6aW5nLm1hcmdpbkxlZnQgPSBtTGVmdDtcbiAgICAgIHNpemluZy5tYXJnaW5MZWZ0ID0gbVJpZ2h0O1xuICAgIH1cblxuICAgIGlmIChtYXJnaW5MZWZ0KSBzaXppbmcubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG4gICAgaWYgKG1hcmdpblJpZ2h0KSBzaXppbmcubWFyZ2luUmlnaHQgPSBtYXJnaW5SaWdodDtcblxuICAgIGlmIChwYWRkaW5nKSB7XG4gICAgICBjb25zdCBbcFJpZ2h0LCBwTGVmdF0gPSBnZXRSaWdodExlZnQocGFkZGluZyk7XG4gICAgICBzaXppbmcucGFkZGluZ0xlZnQgPSBwTGVmdDtcbiAgICAgIHNpemluZy5wYWRkaW5nTGVmdCA9IHBSaWdodDtcbiAgICB9XG5cbiAgICBpZiAocGFkZGluZ0xlZnQpIHNpemluZy5wYWRkaW5nTGVmdCA9IHBhZGRpbmdMZWZ0O1xuICAgIGlmIChwYWRkaW5nUmlnaHQpIHNpemluZy5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nUmlnaHQ7XG4gIH0pO1xuXG4gIHJldHVybiBzaXppbmc7XG59XG5cbi8vIEFwcGx5IHJlZmVyZW5jZSBzdHlsZXMgdG8gYSBoZWFkaW5nIGVsZW1lbnRcbmZ1bmN0aW9uIGFwcGx5UmVmU3R5bGVzKGhlYWRpbmc6IEhUTUxFbGVtZW50LCByZWY6IFJlZlNpemluZykge1xuICBmb3IgKGNvbnN0IGtleSBpbiByZWYpIHtcbiAgICBjb25zdCB2YWwgPSByZWZba2V5IGFzIGtleW9mIFJlZlNpemluZ107XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICBoZWFkaW5nLnN0eWxlLnNldFByb3BlcnR5KGtleU1hcFtrZXldLCB2YWwpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSGVhZGluZ3NNYW5hZ2VyIHtcbiAgaGVhZGluZ3M6IHtcbiAgICBbaWQ6IHN0cmluZ106IHtcbiAgICAgIGxlYWY6IFdvcmtzcGFjZUxlYWY7XG4gICAgICByZXNpemVXYXRjaGVyOiBSZXNpemVPYnNlcnZlcjtcbiAgICB9O1xuICB9ID0ge307XG5cbiAgcHJldmlld1NpemVyUmVmOiBSZWZTaXppbmcgfCBudWxsID0gbnVsbDtcbiAgY29kZU1pcnJvclNpemVyUmVmOiBSZWZTaXppbmcgfCBudWxsID0gbnVsbDtcbiAgY29kZU1pcnJvclNpemVySW52YWxpZDogYm9vbGVhbiA9IHRydWU7XG5cbiAgZ2V0UHJldmlld1NpemVyU3R5bGVzKCkge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm1hcmtkb3duLXByZXZpZXctc2l6ZXJcIik7XG5cbiAgICBpZiAoZWwubGVuZ3RoKSB7XG4gICAgICB0aGlzLnByZXZpZXdTaXplclJlZiA9IGdldFJlZlNpemluZyhlbFswXSBhcyBIVE1MRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q29kZU1pcnJvclNpemVyU3R5bGVzKCkge1xuICAgIGNvbnN0IHNpemVyRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiQ29kZU1pcnJvci1zaXplclwiKTtcbiAgICBjb25zdCBsaW5lRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiQ29kZU1pcnJvci1saW5lXCIpO1xuXG4gICAgaWYgKHNpemVyRWwubGVuZ3RoICYmIGxpbmVFbC5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHNpemVyID0gc2l6ZXJFbFswXSBhcyBIVE1MRWxlbWVudDtcblxuICAgICAgY29uc3QgeyBtYXJnaW5MZWZ0LCBwYWRkaW5nUmlnaHQsIGJvcmRlclJpZ2h0V2lkdGggfSA9IHNpemVyLnN0eWxlO1xuXG4gICAgICAvLyBJZiBjb2RlbWlycm9yIGhhc24ndCBhcHBsaWVkIHN0eWxlcyB0byB0aGUgZGl2IHlldCwgbGV0J3MgY29uc2lkZXIgaXRcbiAgICAgIC8vIGludmFsaWQgc28gd2UgY2FuIGNoZWNrIGl0IGFnYWluIGxhdGVyXG4gICAgICBpZiAobWFyZ2luTGVmdCAhPT0gXCIwcHhcIiAmJiBwYWRkaW5nUmlnaHQgIT09IFwiMHB4XCIpIHtcbiAgICAgICAgdGhpcy5jb2RlTWlycm9yU2l6ZXJJbnZhbGlkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGlubGluZTogUmVmU2l6aW5nID0ge1xuICAgICAgICBtYXJnaW5MZWZ0LFxuICAgICAgICBtYXJnaW5SaWdodDogYm9yZGVyUmlnaHRXaWR0aCxcbiAgICAgICAgcGFkZGluZ1JpZ2h0LFxuICAgICAgfTtcblxuICAgICAgY29uc3Qgc2l6ZXJSZWYgPSBnZXRSZWZTaXppbmcoc2l6ZXIpO1xuXG4gICAgICBjb25zdCBsaW5lID0gbGluZUVsWzBdIGFzIEhUTUxFbGVtZW50O1xuICAgICAgY29uc3QgbGluZVJlZiA9IGdldFJlZlNpemluZyhsaW5lKTtcblxuICAgICAgLy8gQ29tYmluZSBpbmxpbmUgc3R5bGVzIHdpdGggQ1NTIHN0eWxlc1xuICAgICAgdGhpcy5jb2RlTWlycm9yU2l6ZXJSZWYgPSB7XG4gICAgICAgIC4uLmlubGluZSxcbiAgICAgICAgLi4uc2l6ZXJSZWYsXG4gICAgICB9O1xuXG4gICAgICBpZiAobGluZVJlZi5wYWRkaW5nTGVmdCkge1xuICAgICAgICB0aGlzLmNvZGVNaXJyb3JTaXplclJlZi5wYWRkaW5nTGVmdCA9IHRoaXMuY29kZU1pcnJvclNpemVyUmVmXG4gICAgICAgICAgLnBhZGRpbmdMZWZ0XG4gICAgICAgICAgPyBgY2FsYygke3RoaXMuY29kZU1pcnJvclNpemVyUmVmLnBhZGRpbmdMZWZ0fSArICR7bGluZVJlZi5wYWRkaW5nTGVmdH0pYFxuICAgICAgICAgIDogbGluZVJlZi5wYWRkaW5nTGVmdDtcbiAgICAgIH1cblxuICAgICAgaWYgKGxpbmVSZWYucGFkZGluZ1JpZ2h0KSB7XG4gICAgICAgIHRoaXMuY29kZU1pcnJvclNpemVyUmVmLnBhZGRpbmdSaWdodCA9IHRoaXMuY29kZU1pcnJvclNpemVyUmVmXG4gICAgICAgICAgLnBhZGRpbmdSaWdodFxuICAgICAgICAgID8gYGNhbGMoJHt0aGlzLmNvZGVNaXJyb3JTaXplclJlZi5wYWRkaW5nUmlnaHR9ICsgJHtsaW5lUmVmLnBhZGRpbmdSaWdodH0pYFxuICAgICAgICAgIDogbGluZVJlZi5wYWRkaW5nUmlnaHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gT25jZSB0aGUgY29kZW1pcnJvciBoZWFkaW5nIHN0eWxlcyBoYXZlIGJlZW4gdmFsaWRhdGVkLCBsb29wIHRocm91Z2ggYW5kIHVwZGF0ZSBldmVyeXRoaW5nXG4gIHVwZGF0ZUNvZGVNaXJyb3JIZWFkaW5ncygpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmhlYWRpbmdzKS5mb3JFYWNoKChpZCkgPT4ge1xuICAgICAgY29uc3QgaDFFZGl0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7aWR9LWVkaXRgKTtcbiAgICAgIGFwcGx5UmVmU3R5bGVzKGgxRWRpdCwgdGhpcy5jb2RlTWlycm9yU2l6ZXJSZWYpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gQ2xlYW4gdXAgaGVhZGluZ3Mgb25jZSBhIHBhbmUgaGFzIGJlZW4gY2xvc2VkIG9yIHRoZSBwbHVnaW4gaGFzIGJlZW4gZGlzYWJsZWRcbiAgcmVtb3ZlSGVhZGluZyhpZDogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGlzLmhlYWRpbmdzW2lkXSkgcmV0dXJuO1xuXG4gICAgY29uc3QgaDFFZGl0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7aWR9LWVkaXRgKTtcbiAgICBjb25zdCBoMVByZXZpZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtpZH0tcHJldmlld2ApO1xuXG4gICAgaWYgKGgxRWRpdCkgaDFFZGl0LnJlbW92ZSgpO1xuICAgIGlmIChoMVByZXZpZXcpIGgxUHJldmlldy5yZW1vdmUoKTtcblxuICAgIHRoaXMuaGVhZGluZ3NbaWRdLnJlc2l6ZVdhdGNoZXIuZGlzY29ubmVjdCgpO1xuXG4gICAgZGVsZXRlIHRoaXMuaGVhZGluZ3NbaWRdLnJlc2l6ZVdhdGNoZXI7XG4gICAgZGVsZXRlIHRoaXMuaGVhZGluZ3NbaWRdO1xuICB9XG5cbiAgY3JlYXRlSGVhZGluZyhpZDogc3RyaW5nLCBsZWFmOiBXb3Jrc3BhY2VMZWFmKSB7XG4gICAgLy8gQ29kZU1pcnJvciBhZGRzIG1hcmdpbiBhbmQgcGFkZGluZyBvbmx5IGFmdGVyIHRoZSBlZGl0b3IgaXMgdmlzaWJsZVxuICAgIGlmIChcbiAgICAgIHRoaXMuY29kZU1pcnJvclNpemVySW52YWxpZCAmJlxuICAgICAgbGVhZi5nZXRWaWV3U3RhdGUoKS5zdGF0ZT8ubW9kZSA9PT0gXCJzb3VyY2VcIlxuICAgICkge1xuICAgICAgdGhpcy5nZXRDb2RlTWlycm9yU2l6ZXJTdHlsZXMoKTtcblxuICAgICAgaWYgKCF0aGlzLmNvZGVNaXJyb3JTaXplckludmFsaWQpIHtcbiAgICAgICAgdGhpcy51cGRhdGVDb2RlTWlycm9ySGVhZGluZ3MoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5oZWFkaW5nc1tpZF0pIHJldHVybjtcblxuICAgIGNvbnN0IHRpdGxlID0gKGxlYWYudmlldyBhcyBhbnkpLmZpbGU/LmJhc2VuYW1lO1xuXG4gICAgaWYgKCF0aXRsZSkgcmV0dXJuO1xuXG4gICAgY29uc3Qgdmlld0NvbnRlbnQgPVxuICAgICAgbGVhZi52aWV3LmNvbnRhaW5lckVsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJDb2RlTWlycm9yLXNjcm9sbFwiKTtcblxuICAgIGNvbnN0IGxpbmVzID1cbiAgICAgIGxlYWYudmlldy5jb250YWluZXJFbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiQ29kZU1pcnJvci1saW5lc1wiKTtcblxuICAgIGNvbnN0IHByZXZpZXdDb250ZW50ID0gbGVhZi52aWV3LmNvbnRhaW5lckVsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXG4gICAgICBcIm1hcmtkb3duLXByZXZpZXctdmlld1wiXG4gICAgKTtcblxuICAgIGlmICghdGhpcy5wcmV2aWV3U2l6ZXJSZWYpIHtcbiAgICAgIHRoaXMuZ2V0UHJldmlld1NpemVyU3R5bGVzKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNvZGVNaXJyb3JTaXplclJlZikge1xuICAgICAgdGhpcy5nZXRDb2RlTWlycm9yU2l6ZXJTdHlsZXMoKTtcbiAgICB9XG5cbiAgICBpZiAodmlld0NvbnRlbnQubGVuZ3RoICYmIHByZXZpZXdDb250ZW50Lmxlbmd0aCkge1xuICAgICAgLy8gQ3JlYXRlIHRoZSBjb2RlbWlycm9yIGhlYWRpbmdcbiAgICAgIGNvbnN0IGVkaXRFbCA9IHZpZXdDb250ZW50WzBdIGFzIEhUTUxEaXZFbGVtZW50O1xuICAgICAgY29uc3QgaDFFZGl0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xuXG4gICAgICBhcHBseVJlZlN0eWxlcyhoMUVkaXQsIHRoaXMuY29kZU1pcnJvclNpemVyUmVmKTtcblxuICAgICAgaDFFZGl0LnNldFRleHQodGl0bGUpO1xuICAgICAgaDFFZGl0LmlkID0gYCR7aWR9LWVkaXRgO1xuICAgICAgZWRpdEVsLnByZXBlbmQoaDFFZGl0KTtcblxuICAgICAgY29uc3Qgb25SZXNpemUgPSBkZWJvdW5jZShcbiAgICAgICAgKGVudHJpZXM6IGFueSkgPT4ge1xuICAgICAgICAgIGlmIChsaW5lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVzRWwgPSBsaW5lc1swXSBhcyBIVE1MRGl2RWxlbWVudDtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IE1hdGguY2VpbChlbnRyaWVzWzBdLmJvcmRlckJveFNpemVbMF0uYmxvY2tTaXplKTtcblxuICAgICAgICAgICAgbGluZXNFbC5zdHlsZS5wYWRkaW5nVG9wID0gYCR7aGVpZ2h0fXB4YDtcbiAgICAgICAgICAgIGgxRWRpdC5zdHlsZS5tYXJnaW5Cb3R0b20gPSBgLSR7aGVpZ2h0fXB4YDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIDIwLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuXG4gICAgICAvLyBXZSBuZWVkIHRvIHB1c2ggdGhlIGNvbnRlbnQgZG93biB3aGVuIHRoZSBwYW5lIHJlc2l6ZXMgc28gdGhlIGhlYWRpbmdcbiAgICAgIC8vIGRvZXNuJ3QgY292ZXIgdGhlIGNvbnRlbnRcbiAgICAgIGNvbnN0IHJlc2l6ZVdhdGNoZXIgPSBuZXcgKHdpbmRvdyBhcyBhbnkpLlJlc2l6ZU9ic2VydmVyKG9uUmVzaXplKTtcblxuICAgICAgcmVzaXplV2F0Y2hlci5vYnNlcnZlKGgxRWRpdCk7XG5cbiAgICAgIC8vIENyZWF0ZSB0aGUgcHJldmlldyBoZWFkaW5nXG4gICAgICBjb25zdCBwcmV2aWV3RWwgPSBwcmV2aWV3Q29udGVudFswXSBhcyBIVE1MRGl2RWxlbWVudDtcbiAgICAgIGNvbnN0IGgxUHJldmlldyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcblxuICAgICAgYXBwbHlSZWZTdHlsZXMoaDFQcmV2aWV3LCB0aGlzLnByZXZpZXdTaXplclJlZik7XG5cbiAgICAgIGgxUHJldmlldy5zZXRUZXh0KHRpdGxlKTtcbiAgICAgIGgxUHJldmlldy5pZCA9IGAke2lkfS1wcmV2aWV3YDtcbiAgICAgIHByZXZpZXdFbC5wcmVwZW5kKGgxUHJldmlldyk7XG5cbiAgICAgIHRoaXMuaGVhZGluZ3NbaWRdID0geyBsZWFmLCByZXNpemVXYXRjaGVyIH07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgSUQgZm9yIGEgbGVhZlxuICBnZXRMZWFmSWQobGVhZjogV29ya3NwYWNlTGVhZikge1xuICAgIGNvbnN0IHZpZXdTdGF0ZSA9IGxlYWYuZ2V0Vmlld1N0YXRlKCk7XG5cbiAgICBpZiAodmlld1N0YXRlLnR5cGUgPT09IFwibWFya2Rvd25cIikge1xuICAgICAgcmV0dXJuIFwidGl0bGUtXCIgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBJdGVyYXRlIHRocm91Z2ggYWxsIGxlYWZzIGFuZCBnZW5lcmF0ZSBoZWFkaW5ncyBpZiBuZWVkZWRcbiAgY3JlYXRlSGVhZGluZ3MoYXBwOiBBcHApIHtcbiAgICBjb25zdCBzZWVuOiB7IFtrOiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcblxuICAgIGFwcC53b3Jrc3BhY2UuaXRlcmF0ZVJvb3RMZWF2ZXMoKGxlYWYpID0+IHtcbiAgICAgIGNvbnN0IGlkID0gdGhpcy5nZXRMZWFmSWQobGVhZik7XG5cbiAgICAgIGlmIChpZCkge1xuICAgICAgICB0aGlzLmNyZWF0ZUhlYWRpbmcoaWQsIGxlYWYpO1xuICAgICAgICBzZWVuW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3Qua2V5cyh0aGlzLmhlYWRpbmdzKS5mb3JFYWNoKChpZCkgPT4ge1xuICAgICAgaWYgKCFzZWVuW2lkXSkge1xuICAgICAgICB0aGlzLnJlbW92ZUhlYWRpbmcoaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY2xlYW51cCgpIHtcbiAgICB0aGlzLnByZXZpZXdTaXplclJlZiA9IG51bGw7XG4gICAgdGhpcy5jb2RlTWlycm9yU2l6ZXJSZWYgPSBudWxsO1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5oZWFkaW5ncykuZm9yRWFjaCgoaWQpID0+IHtcbiAgICAgIHRoaXMucmVtb3ZlSGVhZGluZyhpZCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBsdWdpbiB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBIZWFkaW5nc01hbmFnZXIgfSBmcm9tIFwiLi9IZWFkaW5nc01hbmFnZXJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVtYmVkZGVkTm90ZVRpdGxlc1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcbiAgaGVhZGluZ3NNYW5hZ2VyOiBIZWFkaW5nc01hbmFnZXI7XHJcblxyXG4gIG9ubG9hZCgpIHtcclxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcImVtYmVkZGVkLW5vdGUtdGl0bGVzXCIpO1xyXG4gICAgdGhpcy5oZWFkaW5nc01hbmFnZXIgPSBuZXcgSGVhZGluZ3NNYW5hZ2VyKCk7XHJcblxyXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFxyXG4gICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oXCJsYXlvdXQtY2hhbmdlXCIsICgpID0+IHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuaGVhZGluZ3NNYW5hZ2VyLmNyZWF0ZUhlYWRpbmdzKHRoaXMuYXBwKTtcclxuICAgICAgICB9LCAwKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgLy8gTGlzdGVuIGZvciBDU1MgY2hhbmdlcyBzbyB3ZSBjYW4gcmVjYWxjdWxhdGUgaGVhZGluZyBzdHlsZXNcclxuICAgIHRoaXMucmVnaXN0ZXJFdmVudChcclxuICAgICAgdGhpcy5hcHAud29ya3NwYWNlLm9uKFwiY3NzLWNoYW5nZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5oZWFkaW5nc01hbmFnZXIuY2xlYW51cCgpO1xyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuaGVhZGluZ3NNYW5hZ2VyLmNyZWF0ZUhlYWRpbmdzKHRoaXMuYXBwKTtcclxuICAgICAgICB9LCAwKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5hcHAud29ya3NwYWNlLmxheW91dFJlYWR5XHJcbiAgICAgID8gdGhpcy5hcHAud29ya3NwYWNlLnRyaWdnZXIoXCJsYXlvdXQtY2hhbmdlXCIpXHJcbiAgICAgIDogdGhpcy5hcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoKCkgPT4ge1xyXG4gICAgICAgICAgLy8gVHJpZ2dlciBsYXlvdXQtY2hhbmdlIHRvIGVuc3VyZSBoZWFkaW5ncyBhcmUgY3JlYXRlZCB3aGVuIHRoZSBhcHAgbG9hZHNcclxuICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS50cmlnZ2VyKFwibGF5b3V0LWNoYW5nZVwiKTtcclxuICAgICAgICB9KTtcclxuICB9XHJcblxyXG4gIG9udW5sb2FkKCkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwiZW1iZWRkZWQtbm90ZS10aXRsZXNcIik7XHJcbiAgICB0aGlzLmhlYWRpbmdzTWFuYWdlci5jbGVhbnVwKCk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJkZWJvdW5jZSIsIlBsdWdpbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDO0FBQzdCLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQztBQUN6QixNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUM7QUFDN0IsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDO0FBQzlCLE1BQU0saUJBQWlCLEdBQUcsMkJBQTJCLENBQUM7QUFDdEQsTUFBTSxrQkFBa0IsR0FBRyx3REFBd0QsQ0FBQztBQUVwRjtBQUNBLFNBQVMsT0FBTyxDQUFDLElBQVM7SUFDeEIsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBRUQ7QUFDQSxTQUFTLGFBQWEsQ0FBQyxVQUF5QjtJQUM5QyxJQUFJLFdBQVcsR0FBRyxVQUFVLENBQUMsS0FBSyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDOztJQUVqRSxJQUFJLFVBQVUsQ0FBQyxRQUFRO1FBQUUsT0FBTyxFQUFFLENBQUM7O0lBRW5DLElBQ0UsV0FBVztRQUNYLFdBQVcsQ0FBQyxNQUFNO1FBQ2xCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPO1FBRXZDLE9BQU8sRUFBRSxDQUFDOztJQUVaLE9BQU8sT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBRUQsU0FBUyxLQUFLLENBQUMsTUFBYyxFQUFFLEVBQVU7SUFDdkMsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQixPQUFPLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBRUQ7QUFDQSxTQUFTLGNBQWMsQ0FBQyxRQUFnQjtJQUN0QyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ25CLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUMzQixJQUFJLEVBQ0osS0FBSyxDQUFDOztJQUVSLFFBQVEsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLE9BQU8sSUFBSSxJQUFJLFFBQVEsR0FBRzs7UUFFeEQsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUN4QyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDOztRQUVsQixLQUFLLEtBQUssSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzs7UUFFdkQsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUN2QyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDOztRQUVsQixLQUFLLEtBQUssSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzs7UUFFdEQsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDN0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQzs7UUFFbEIsS0FBSyxLQUFLLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDOztRQUU1QyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQixLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDOztRQUVsQixLQUFLLEtBQUssSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7O1FBRTFDLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzlCLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUM7O1FBRWxCLEtBQUssS0FBSyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzs7UUFFN0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDckM7SUFDRCxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFFRDtBQUNBLFNBQVMsbUJBQW1CLENBQUMsT0FBb0IsRUFBRSxZQUFvQjtJQUNyRSxJQUFJLFNBQVMsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUNyQyxRQUFRLEVBQ1IsS0FBSyxFQUNMLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFYixRQUFRLFFBQVEsR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUc7UUFDckMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzdCLEtBQUssR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDakMsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQztTQUMxQztLQUNGO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUMsT0FBb0IsRUFBRSxLQUFxQjs7SUFFcEUsU0FBUyxrQkFBa0IsQ0FBQyxDQUFlLEVBQUUsQ0FBZTtRQUMxRCxJQUFJLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFELElBQUksTUFBTSxHQUFHLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7O1FBRzFELElBQUksTUFBTSxLQUFLLE1BQU0sRUFBRTtZQUNyQixJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJO2dCQUFFLE1BQU0sSUFBSSxDQUFDLENBQUM7WUFDekMsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsSUFBSTtnQkFBRSxNQUFNLElBQUksQ0FBQyxDQUFDO1NBQzFDO1FBRUQsUUFDRSxNQUFNO1lBQ04sTUFBTSxFQUNOO0tBQ0g7SUFFRCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUN4QyxDQUFDO1NBRWUsa0JBQWtCLENBQUMsT0FBb0I7SUFDckQsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDdEQsSUFBSSxLQUFLLENBQUM7SUFDVixJQUFJLEtBQUssQ0FBQztJQUNWLElBQUksSUFBSSxDQUFDO0lBQ1QsSUFBSSxNQUFNLEdBQW1CLEVBQUUsQ0FBQzs7O0lBSWhDLFFBQVEsS0FBSyxHQUFHLFdBQVcsQ0FBQyxLQUFLLEVBQUUsR0FBRzs7UUFFcEMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7UUFFN0IsUUFBUSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHOztZQUU3QixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7O2dCQUVuQixLQUFLLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7O2dCQUVyRCxTQUFTO2FBQ1Y7O2lCQUVJLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTs7Z0JBRW5CLEtBQUssR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDOztnQkFFMUMsU0FBUzthQUNWOztZQUdELElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7O2dCQUV0QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ25CO1NBQ0Y7S0FDRjs7SUFFRCxPQUFPLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM1Qzs7QUN4SUE7QUFDQSxTQUFTLFlBQVksQ0FBQyxHQUFXO0lBQy9CLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNsQixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRS9CLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDMUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzQjtRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDckIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzQjtLQUNGO0lBRUQsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxNQUFNLEdBQTRCO0lBQ3RDLEtBQUssRUFBRSxPQUFPO0lBQ2QsUUFBUSxFQUFFLFdBQVc7SUFDckIsTUFBTSxFQUFFLFFBQVE7SUFDaEIsVUFBVSxFQUFFLGFBQWE7SUFDekIsV0FBVyxFQUFFLGNBQWM7SUFDM0IsT0FBTyxFQUFFLFNBQVM7SUFDbEIsV0FBVyxFQUFFLGNBQWM7SUFDM0IsWUFBWSxFQUFFLGVBQWU7Q0FDOUIsQ0FBQztBQUVGO0FBQ0EsU0FBUyxZQUFZLENBQUMsRUFBZTtJQUNuQyxNQUFNLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyQyxNQUFNLE1BQU0sR0FBYyxFQUFFLENBQUM7SUFFN0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDZCxNQUFNLEVBQ0osS0FBSyxFQUNMLFFBQVEsRUFDUixNQUFNLEVBQ04sVUFBVSxFQUNWLFdBQVcsRUFDWCxPQUFPLEVBQ1AsV0FBVyxFQUNYLFlBQVksR0FDYixHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFWixJQUFJLEtBQUssRUFBRTtZQUNULE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ3RCO1FBRUQsSUFBSSxRQUFRLEVBQUU7WUFDWixNQUFNLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztTQUM1QjtRQUVELElBQUksTUFBTSxFQUFFO1lBQ1YsTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0MsTUFBTSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7WUFDMUIsTUFBTSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7U0FDNUI7UUFFRCxJQUFJLFVBQVU7WUFBRSxNQUFNLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUMvQyxJQUFJLFdBQVc7WUFBRSxNQUFNLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUVsRCxJQUFJLE9BQU8sRUFBRTtZQUNYLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO1NBQzdCO1FBRUQsSUFBSSxXQUFXO1lBQUUsTUFBTSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDbEQsSUFBSSxZQUFZO1lBQUUsTUFBTSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7S0FDdEQsQ0FBQyxDQUFDO0lBRUgsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVEO0FBQ0EsU0FBUyxjQUFjLENBQUMsT0FBb0IsRUFBRSxHQUFjO0lBQzFELEtBQUssTUFBTSxHQUFHLElBQUksR0FBRyxFQUFFO1FBQ3JCLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFzQixDQUFDLENBQUM7UUFFeEMsSUFBSSxHQUFHLEVBQUU7WUFDUCxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDN0M7S0FDRjtBQUNILENBQUM7TUFFWSxlQUFlO0lBQTVCO1FBQ0UsYUFBUSxHQUtKLEVBQUUsQ0FBQztRQUVQLG9CQUFlLEdBQXFCLElBQUksQ0FBQztRQUN6Qyx1QkFBa0IsR0FBcUIsSUFBSSxDQUFDO1FBQzVDLDJCQUFzQixHQUFZLElBQUksQ0FBQztLQTJNeEM7SUF6TUMscUJBQXFCO1FBQ25CLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBRXJFLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksQ0FBQyxlQUFlLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQWdCLENBQUMsQ0FBQztTQUMzRDtLQUNGO0lBRUQsd0JBQXdCO1FBQ3RCLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRWxFLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ25DLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQWdCLENBQUM7WUFFeEMsTUFBTSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDOzs7WUFJbkUsSUFBSSxVQUFVLEtBQUssS0FBSyxJQUFJLFlBQVksS0FBSyxLQUFLLEVBQUU7Z0JBQ2xELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxLQUFLLENBQUM7YUFDckM7WUFFRCxNQUFNLE1BQU0sR0FBYztnQkFDeEIsVUFBVTtnQkFDVixXQUFXLEVBQUUsZ0JBQWdCO2dCQUM3QixZQUFZO2FBQ2IsQ0FBQztZQUVGLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUVyQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFnQixDQUFDO1lBQ3RDLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQzs7WUFHbkMsSUFBSSxDQUFDLGtCQUFrQixtQ0FDbEIsTUFBTSxHQUNOLFFBQVEsQ0FDWixDQUFDO1lBRUYsSUFBSSxPQUFPLENBQUMsV0FBVyxFQUFFO2dCQUN2QixJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0I7cUJBQzFELFdBQVc7c0JBQ1YsUUFBUSxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxNQUFNLE9BQU8sQ0FBQyxXQUFXLEdBQUc7c0JBQ3ZFLE9BQU8sQ0FBQyxXQUFXLENBQUM7YUFDekI7WUFFRCxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGtCQUFrQjtxQkFDM0QsWUFBWTtzQkFDWCxRQUFRLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLE1BQU0sT0FBTyxDQUFDLFlBQVksR0FBRztzQkFDekUsT0FBTyxDQUFDLFlBQVksQ0FBQzthQUMxQjtTQUNGO0tBQ0Y7O0lBR0Qsd0JBQXdCO1FBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDcEMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDckQsY0FBYyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUNqRCxDQUFDLENBQUM7S0FDSjs7SUFHRCxhQUFhLENBQUMsRUFBVTtRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFBRSxPQUFPO1FBRS9CLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3JELE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRTNELElBQUksTUFBTTtZQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM1QixJQUFJLFNBQVM7WUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFN0MsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUN2QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDMUI7SUFFRCxhQUFhLENBQUMsRUFBVSxFQUFFLElBQW1COzs7UUFFM0MsSUFDRSxJQUFJLENBQUMsc0JBQXNCO1lBQzNCLENBQUEsTUFBQSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSywwQ0FBRSxJQUFJLE1BQUssUUFBUSxFQUM1QztZQUNBLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1lBRWhDLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO2FBQ2pDO1NBQ0Y7UUFFRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQUUsT0FBTztRQUU5QixNQUFNLEtBQUssR0FBRyxNQUFDLElBQUksQ0FBQyxJQUFZLENBQUMsSUFBSSwwQ0FBRSxRQUFRLENBQUM7UUFFaEQsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPO1FBRW5CLE1BQU0sV0FBVyxHQUNmLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFcEUsTUFBTSxLQUFLLEdBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsc0JBQXNCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUVuRSxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FDakUsdUJBQXVCLENBQ3hCLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztTQUM5QjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDNUIsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7U0FDakM7UUFFRCxJQUFJLFdBQVcsQ0FBQyxNQUFNLElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRTs7WUFFL0MsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBbUIsQ0FBQztZQUNoRCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRTVDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFFaEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0QixNQUFNLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxPQUFPLENBQUM7WUFDekIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUV2QixNQUFNLFFBQVEsR0FBR0EsaUJBQVEsQ0FDdkIsQ0FBQyxPQUFZO2dCQUNYLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtvQkFDaEIsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBbUIsQ0FBQztvQkFDM0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUVoRSxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDO29CQUN6QyxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxJQUFJLE1BQU0sSUFBSSxDQUFDO2lCQUM1QzthQUNGLEVBQ0QsRUFBRSxFQUNGLElBQUksQ0FDTCxDQUFDOzs7WUFJRixNQUFNLGFBQWEsR0FBRyxJQUFLLE1BQWMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFbkUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7WUFHOUIsTUFBTSxTQUFTLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBbUIsQ0FBQztZQUN0RCxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRS9DLGNBQWMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBRWhELFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekIsU0FBUyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsVUFBVSxDQUFDO1lBQy9CLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsQ0FBQztTQUM3QztLQUNGOztJQUdELFNBQVMsQ0FBQyxJQUFtQjtRQUMzQixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFdEMsSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtZQUNqQyxPQUFPLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDM0Q7UUFFRCxPQUFPLElBQUksQ0FBQztLQUNiOztJQUdELGNBQWMsQ0FBQyxHQUFRO1FBQ3JCLE1BQU0sSUFBSSxHQUE2QixFQUFFLENBQUM7UUFFMUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUk7WUFDbkMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVoQyxJQUFJLEVBQUUsRUFBRTtnQkFDTixJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDN0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQzthQUNqQjtTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDYixJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ3hCO1NBQ0YsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztRQUUvQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDeEIsQ0FBQyxDQUFDO0tBQ0o7OztNQ25Ua0Isd0JBQXlCLFNBQVFDLGVBQU07SUFHMUQsTUFBTTtRQUNKLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQztRQUU3QyxJQUFJLENBQUMsYUFBYSxDQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFO1lBQ3JDLFVBQVUsQ0FBQztnQkFDVCxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDL0MsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNQLENBQUMsQ0FDSCxDQUFDOztRQUdGLElBQUksQ0FBQyxhQUFhLENBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUU7WUFDbEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUUvQixVQUFVLENBQUM7Z0JBQ1QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQy9DLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDUCxDQUFDLENBQ0gsQ0FBQztRQUVGLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFdBQVc7Y0FDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQztjQUMzQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7O2dCQUUvQixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7YUFDN0MsQ0FBQyxDQUFDO0tBQ1I7SUFFRCxRQUFRO1FBQ04sUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNoQzs7Ozs7In0=
